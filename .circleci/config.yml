version: 2.1
orbs:
  build-tools: circleci/build-tools@2.9.1
  azure-aks: circleci/azure-aks@0.3.0
  kubernetes: circleci/kubernetes@0.4.0
  azure-cli: circleci/azure-cli@1.0.0
parameters:
  release-tag:
    type: string
    default: "1.0.5"
  started-by:
    type: string
    default: "john"
  team-name:
    type: string
    default: "ecom"
  deploy:
    type: boolean
    default: true
jobs:
 build:
   # context: TestCICD
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:3.1
    environment:
      #VERSION_NUMBER: 0.0.0.<< pipeline.TestVar >>
      PROJECT_NAME: ${PROJECTNAME}  
    steps:
      - checkout
      - run:
          name: Install Build/System Dependencies
          command: |
            apt-get update -y
            apt-get install curl gnupg -y
            apt-get install nodejs -y
            apt-get install yarn -y
            apt-get install zip -y
      - run:
           name: "Setup custom environment variables"
           command: |
            echo 'export MY_ENV_VAR="TESTVAR"' >> $BASH_ENV
      - run:
          name: "Environment Variable"
          command: |
            echo ${CIRCLE_BRANCH}
            echo $CIRCLE_BRANCH
            echo ${MY_ENV_VAR}
            echo ${PROJECTNAME}
            echo $Version
            echo $pipeline.number
            echo << pipeline.parameters.release-tag >>
            echo << pipeline.parameters.started-by >>
      - run: find .
      - run: dotnet restore
      - run: dotnet build
      #- run: dotnet test --no-build Test.CICDFlow.Tests
      - run: dotnet test  --collect:"XPlat Code Coverage" -v m -r ~/reports/
      - run:
          name: Build for Release
          command: |
            dotnet publish ./Test.CICDFlow/Test.CICDFlow.csproj -c Release -o ../app-publish --self-contained -r linux-musl-x64
            cd ../app-publish
            # Zip publish files
            zip -r ../app-publish.zip *
            echo $VERSION_NUMBER
            echo  pipeline.number 
      - store_artifacts:
           path: ../app-publish.zip
           destination: publish
      - store_artifacts:
           path: ~/reports
           destination: reports
      - store_test_results:
           path: ~/reports
      - persist_to_workspace: # store the built files into the workspace for other jobs.
          root: ../
          paths:
            - app-publish.zip
            - reports
  
 create-deployment:
    executor: azure-aks/default
    parameters:
      cluster_name:
        description: |
          Name of the AKS cluster
        type: string
        default: ${cluster_name}
      resource_group:
        description: |
          Resource group that the cluster is in
        type: string
        default: ${resource_group}
    steps:
      - checkout
      - run:
          name: "Environment Variable"
          command: |
            echo << parameters.cluster_name >>
            echo << parameters.resource_group >>
            echo ${cluster_name}
            echo ${resource_group}
      - azure-aks/update-kubeconfig-with-credentials:
          cluster-name:  << parameters.cluster_name >>
          install-kubectl: true
          perform-login: true
          resource-group: << parameters.resource_group >>
 verify-install:
     executor: azure-cli/default
     steps:
       - azure-cli/install
       - run:
           command: az -v
           name: Verify Azure CLI is installed
       - run:
           command: |
                    az account set --subscription 669192b3-0010-41ad-bf24-eb07b74d6c6c

           name: Login to the Azure CLI via Service Principal
 deploy:
    docker:
      - image: mcr.microsoft.com/azure-cli:latest
    environment:
      VERSION_NUMBER: 0.0.0.1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Azure Staging Deploy
          command: |
            cd /tmp/workspace
            ls -l
workflows:
  version: 2
  build-and-verify:
      jobs:
        - build
        - verify-install
  deploy:
      when: << pipeline.parameters.deploy >>
      jobs:
        - deploy
